Problem Statement:-

Our pizza restaurant is working on a new web application designed to run in a Kubernetes cluster. The development team has designed a web service which serves a list of pizza toppings. The team has provided a set of specifications which the pizza topping web service needs in order to run.

We have been asked to create a deployment that meets the app's specifications. Then, we need to expose the application using a NodePort service. This setup should meet the following criteria:

1. All objects should be in the <your-name>-pizza namespace. This namespace already exists in the cluster.
2. The deployment should be named pizza-deployment.
3. The deployment should have 3 replicas.
4. The deployment's pods should have one container using the linuxacademycontent/pizza-service image with the tag 1.14.6.
5. Run the container with the command nginx.
6. Run the container with the arguments "-g", "daemon off;".
7. The pods should expose port 80 to the cluster.
8. The pods should be configured to periodically check the /healthz endpoint on port 8081, and restart automatically if the request fails.
9. The pods should not receive traffic from the service until the / endpoint on port 80 responds successfully.
10. The service should be named pizza-service.
11. The service should forward traffic to port 80 on the pods.
12. The service should be exposed externally by listening on port 30080 on each node.

Pizza-deployemnt.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pizza-deployment
spec:
  replicas: 3
    spec:
      containers:
      - name: vishnu-pizza
        image: linuxacademycontent/pizza-service:1.14.6
        ports:
        - containerPort: 80
      - name: nginx-pizza
        image: nginx:latest
        ports:
      - containerPort: 80
      - name: liveness
        image: k8s.gcr.io/liveness
        args:
        - /server
        livenessProbe:
        httpGet:
        path: /healthz
        port: 8081
        httpHeaders:
        - name: Custom-Header
          value: Awesome
            initialDelaySeconds: 3
            periodSeconds: 3 
			
kubectl apply -f pizza-deployemnt.yaml


pizza-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: pizza-service
spec:
  selector:
    app: pizza-deployment
  ports:
    - protocol: TCP
      port: 30080
      targetPort: 80
	  
kubectl apply -f pizza-service.yaml